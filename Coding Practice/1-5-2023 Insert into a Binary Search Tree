class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
    this.val = val;
    this.left = left;
    this.right = right;
         }
     }
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        // If the root is null, create a new node with the given value and return it
        if(root == null) return new TreeNode(val);
        // If the value is less than the root value, recursively call the function on the left subtree
        if(root.val > val) root.left = insertIntoBST(root.left, val);
        // If the value is greater than or equal to the root value, recursively call the function on the right subtree
        else root.right = insertIntoBST(root.right, val);
        // Return the root of the modified BST
        return root;
    }
    //function to print the binary tree in pre order traversal
    private static void printPreOrder(TreeNode node) {
        if (node == null) {
            return;
        }
        System.out.print(node.val + " ");
        printPreOrder(node.left);
        printPreOrder(node.right);
    }
    public static void main(String[] args) {
        //call the function and initialize a binary tree
        Solution solution = new Solution();
        TreeNode root = new TreeNode(4);
        root.left = new TreeNode(2);
        root.right = new TreeNode(7);
        root.left.left = new TreeNode(1);
        root.left.right = new TreeNode(3);
        //initialize the value you want to add in the binary tree and print the updated BST
        int val = 5;
        TreeNode updatedRoot = solution.insertIntoBST(root, val);
        printPreOrder(updatedRoot);
    }
}
