import java.util.*;
class Solution {
    public int distinctPrimeFactors(int[] nums) {
        HashSet<Integer> set = new HashSet<Integer>(); // Create a HashSet to store distinct prime factors
        for (int i : nums) { // Iterate through each number in the array
            if (i % 2 == 0) { // If the number is divisible by 2
                set.add(2); // Add 2 to the set as a prime factor
                /* Until we get an odd number, the loop divides by the prime number 2 */
                while (i % 2 == 0) {
                    i = i / 2; // Divide the number by 2 until it becomes odd
                }
            }
            /* Now we only have odd numbers after the previous loop execution and we divide by odd prime numbers */
            for (int j = 3; j <= Math.sqrt(i); j += 2) {
                // j = j + 2 makes sure only odd numbers since the initial value j = 3 is odd
                while (i % j == 0) {
                    set.add(j); // Add the prime factor j to the set
                    i /= j; // Divide the number by j until it is no longer divisible by j
                }
            }
            if (i > 2) {
                /* Now if we have a prime number greater than 2, add it to the set */
                set.add(i);
            }
        }
        return set.size(); // Return the size of the set, which represents the count of distinct prime factors
    }
    public static void main(String[] args) {
        //Initialise the int[] nums and call the function
        int[] nums ={2,4,3,7,10,6};
        Solution s = new Solution();
        System.out.println(s.distinctPrimeFactors(nums));   
    }
}
