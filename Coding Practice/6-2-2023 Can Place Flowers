class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        // If the number of flowers to be placed is 0, it is always possible to place them
        if (n == 0) {
            return true;
        }
        // Iterate over the flowerbed array
        for (int i = 0; i < flowerbed.length; i++) {
            // Check if the current spot is empty (0) and satisfies the planting condition
            // The condition requires an empty spot either at the beginning or with an empty spot before it
            // and an empty spot either at the end or with an empty spot after it
            if (flowerbed[i] == 0 && (i == 0 || flowerbed[i-1] == 0) && (i == flowerbed.length-1 || flowerbed[i+1] == 0)) {
                // Plant a flower at the current spot by setting it to 1
                flowerbed[i] = 1;
                // Decrement the count of remaining flowers to be placed
                n--;
                // If all the flowers have been placed, return true
                if (n == 0) {
                    return true;
                }
            }
        }
        // If not all the flowers have been placed, return false
        return false;
    }
    public static void main(String[] args) {
        //Initialise flowerbed & n and call the function 
        int[] flowerbed = {1,0,0,0,1};
        int n = 1;
        Solution s = new Solution();
        System.out.println(s.canPlaceFlowers(flowerbed, n));
    }
}
