import java.util.*;
class Solution
{
    // Function to calculate the span of stock's price for all n days.
    public static int[] calculateSpan(int price[], int n)
    {
        int[] span = new int[n];
        Stack<Integer> stack = new Stack<>(); // To store indices of days

        // The span of the first day is always 1
        span[0] = 1;
        stack.push(0); // Push the index of the first day into the stack

        for (int i = 1; i < n; i++)
        {
            // Pop elements from the stack while the stock price at the top of the stack is less than the current price
            while (!stack.isEmpty() && price[stack.peek()] <= price[i])
                stack.pop();

            // Calculate the span for the current day
            if (stack.isEmpty())
                span[i] = i + 1; // If the stack is empty, it means there is no previous day with a price greater than the current day, so the span is the current day's index plus 1.
            else
                span[i] = i - stack.peek(); // If there is a previous day with a price greater than the current day, calculate the span accordingly.

            stack.push(i); // Push the current day's index into the stack for future reference
        }

        return span;//return span
    }
    public static void main(String[] args) {
      //Initialise variables and call the function
       int N = 7, price[] = {100, 80, 60, 70, 60, 75, 85}; 
       System.out.println(Arrays.toString(calculateSpan(price, N)) ); //Print the result
    }
}
