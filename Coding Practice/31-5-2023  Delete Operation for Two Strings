class Solution {
    public int minDistance(String s1, String s2) {
        int n = s1.length(); // Length of s1
        int m = s2.length(); // Length of s2

        if (n < m) minDistance(s2, s1); // If s1 is shorter than s2, swap the strings and recursively call the method.

        char[] WA1 = s1.toCharArray(); // Convert s1 to a character array
        char[] WA2 = s2.toCharArray(); // Convert s2 to a character array
        
        int[] dpLast = new int[m + 1]; // Array to store the previous row of dynamic programming values
        int[] dpCurr = new int[m + 1]; // Array to store the current row of dynamic programming values
        
        for (char c1 : WA1) { // Iterate over each character in WA1
            for (int j = 0; j < m; j++) { // Iterate over each position in WA2
                if (c1 == WA2[j]) { // If a match is found
                    dpCurr[j + 1] = dpLast[j] + 1; // Update the current row with the value from the diagonal position + 1
                } else {
                    dpCurr[j + 1] = Math.max(dpCurr[j], dpLast[j + 1]); // Update the current row with the maximum value from the left or above cell
                }
            }
            int[] tempArr = dpLast; // Swap the references of dpLast and dpCurr using a temporary array
            dpLast = dpCurr;
            dpCurr = tempArr;
        }
        
        return n + m - 2 * dpLast[m]; // Return the minimum edit distance using the formula: n + m - 2 * dpLast[m]
    }
    public static void main(String[] args) {
        //Initialise s1 and s2 and call the function
        String s1 = "sea";
        String s2 = "eat";
        Solution s = new Solution();
        System.out.println(s.minDistance(s1, s2));
    }
}
