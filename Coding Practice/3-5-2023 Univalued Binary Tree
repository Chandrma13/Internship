import java.util.*;
//Initialize a tree node
 class TreeNode {
     int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
     this.val = val;
     this.left = left;
     this.right = right;
     }
 }
 class Solution {
    // create a set to store the values of nodes encountered during DFS
    Set<Integer> set = new HashSet<>();
    
    // method to check if the given binary tree is univalued
    public boolean isUnivalTree(TreeNode root) {
        // perform DFS to traverse the tree and populate the set
        dfs(root);
        
        // if the set has only one value, the tree is univalued
        if(set.size() == 1) return true;
        else return false;
    }
    
    // helper method to perform DFS and populate the set
    private void dfs(TreeNode root) {
        // if the current node is not null, add its value to the set
        if(root != null) {
            set.add(root.val);
            // recursively call dfs on the left and right children of the current node
            dfs(root.left);
            dfs(root.right);
        }
    }
    public static void main(String[] args) {
        // create a binary tree and call the function
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(1);
        root.right = new TreeNode(1);
        root.left.left = new TreeNode(1);
        root.left.right = new TreeNode(1);
        root.right.right = new TreeNode(1);

        Solution solution = new Solution();
        boolean isUnivalued = solution.isUnivalTree(root);
        System.out.println(isUnivalued);
    }
    
}
