class Solution {
    public int strongPasswordChecker(String s) {
        int res = 0, a = 1, A = 1, d = 1;  // Initialize counters for lowercase, uppercase, and digit flags
        char[] carr = s.toCharArray();  // Convert the input string to a character array
        int[] arr = new int[carr.length];  // Create an integer array to store consecutive character counts
            
        for (int i = 0; i < arr.length;) {
            if (Character.isLowerCase(carr[i])) a = 0;  // Set lowercase flag to 0 if a lowercase character is found
            if (Character.isUpperCase(carr[i])) A = 0;  // Set uppercase flag to 0 if an uppercase character is found
            if (Character.isDigit(carr[i])) d = 0;  // Set digit flag to 0 if a digit character is found
                
            int j = i;
            while (i < carr.length && carr[i] == carr[j]) i++;  // Count consecutive occurrences of the same character
            arr[j] = i - j;  // Store the count in the array
        }
            
        int total_missing = (a + A + d);  // Calculate the total number of missing character types
    
        if (arr.length < 6) {
            res += total_missing + Math.max(0, 6 - (arr.length + total_missing));  // Add the missing characters and the deficit to the result
                
        } else {
            int over_len = Math.max(arr.length - 20, 0), left_over = 0;  // Calculate the excess length and initialize counters
                
            res += over_len;  // Add the excess length to the result
                
            for (int k = 1; k < 3; k++) {
                for (int i = 0; i < arr.length && over_len > 0; i++) {
                    if (arr[i] < 3 || arr[i] % 3 != (k - 1)) continue;  // Skip character groups that don't need modification
                    arr[i] -= Math.min(over_len, k);  // Reduce the character count by the minimum of excess length or k
                    over_len -= k;  // Update the excess length
                }
            }
           for (int i = 0; i < arr.length; i++) {
    if (arr[i] >= 3 && over_len > 0) {  // If the character group has at least 3 consecutive characters and there is excess length
        int need = arr[i] - 2;  // Calculate the number of characters that need to be replaced or deleted
        arr[i] -= over_len;  // Reduce the character count by the excess length
        over_len -= need;  // Update the excess length by the number of characters needed
    }
        
    if (arr[i] >= 3) left_over += arr[i] / 3;  // Count the remaining character groups with more than 2 consecutive characters
}

                
            res += Math.max(total_missing, left_over);  // Add the larger of missing characters and remaining character groups to the result
        }
            
        return res;  // Return the final result
    }
    public static void main(String[] args) {
        //Initialise String s and call the function
        String s = "a";
        Solution sol = new Solution();
        System.out.println(sol.strongPasswordChecker(s));
    }
    
}
