import java.util.ArrayList;

class Solution {
    // Function to return a list of integers denoting spiral traversal of matrix.
    static ArrayList<Integer> spirallyTraverse(int matrix[][], int r, int c) {
        ArrayList<Integer> result = new ArrayList<>();
        
        // Initialize variables to represent the boundaries of the matrix.
        int topRow = 0;
        int bottomRow = r - 1;
        int leftColumn = 0;
        int rightColumn = c - 1;
        
        // Loop until all elements in the matrix are covered in the spiral traversal.
        while (topRow <= bottomRow && leftColumn <= rightColumn) {
            // Traverse the top row from left to right.
            for (int i = leftColumn; i <= rightColumn; i++) {
                result.add(matrix[topRow][i]); // Add each element to the result ArrayList.
            }
            topRow++; // Increment to exclude the top row from further traversal in the next iteration.
            
            // Traverse the rightmost column from top to bottom.
            for (int i = topRow; i <= bottomRow; i++) {
                result.add(matrix[i][rightColumn]); // Add each element to the result ArrayList.
            }
            rightColumn--; // Decrement to exclude the rightmost column from further traversal.
            
            // Traverse the bottom row from right to left.
            if (topRow <= bottomRow) { // Check if there are multiple rows to avoid duplicate traversal.
                for (int i = rightColumn; i >= leftColumn; i--) {
                    result.add(matrix[bottomRow][i]); // Add each element to the result ArrayList.
                }
                bottomRow--; // Decrement to exclude the bottom row from further traversal.
            }
            
            // Traverse the leftmost column from bottom to top.
            if (leftColumn <= rightColumn) { // Check if there are multiple columns to avoid duplicate traversal.
                for (int i = bottomRow; i >= topRow; i--) {
                    result.add(matrix[i][leftColumn]); // Add each element to the result ArrayList.
                }
                leftColumn++; // Increment to exclude the leftmost column from further traversal.
            }
        }
        
        return result; // Return the ArrayList containing the spiral traversal of the matrix.
    }
    public static void main(String[] args) {
        //Initialise variables 
       int r = 3, c = 4 ;
        int matrix[][] = {{1, 2, 3, 4},
           {5, 6, 7, 8},
           {9, 10, 11, 12}};
        //Print the result
        System.out.println(spirallyTraverse(matrix, r, c)); 

    }
}
