 class TreeNode {//Definition of a Binary Tree
     int val;
     TreeNode left;
     TreeNode right;
     TreeNode() {}
     TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
         this.right = right;
    }
 }
 class Solution {
    public boolean isIdentical(TreeNode root, TreeNode subRoot) {
        // If both root and subRoot are null, they are identical
        if (root == null && subRoot == null)
            return true;
        
        // If either root or subRoot is null but not both, they are not identical
        if (root == null || subRoot == null)
            return false;
        
        // If the values of root and subRoot are equal, check if their left and right subtrees are identical
        if (root.val == subRoot.val)
            return isIdentical(root.left, subRoot.left) && isIdentical(root.right, subRoot.right);
        
        // If the values are not equal, they are not identical
        return false;
    }
    
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        // If subRoot is null, it is a subtree of any tree (including a null tree)
        if (subRoot == null)
            return true;
        
        // If root is null but subRoot is not null, subRoot cannot be a subtree
        if (root == null)
            return false;
        
        // If the values of root and subRoot are equal
        if (root.val == subRoot.val) {
            // Check if subRoot is identical to the current subtree of root
            if (isIdentical(root, subRoot))
                return true;
        }
        
        // Recursively check if subRoot is a subtree of the left or right subtree of root
        return isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);
    }
    public static void main(String[] args) {
        //Initialise the binary tree and call the function
        TreeNode root = new TreeNode(3);
        root.left = new TreeNode(4);
        root.right = new TreeNode(5);
        root.left.left = new TreeNode(1);
        root.left.right = new TreeNode(2);
     
        Solution s = new Solution();
        System.out.println(s.isSubtree(root, root));
    }
}
