 class Solution {
    public boolean isAdditiveNumber(String num) {
        int n = num.length();
        // Iterate over possible lengths of x1 and x2
        for (int i = 1; i <= n / 2; ++i) {
            for (int j = 1; Math.max(j, i) <= n - i - j; ++j) {
                // Check if the current combination is valid
                if (isValid(i, j, num)) {
                    return true; // Return true if it's a valid additive number
                }
            }
        }
        
        return false; // No valid additive numbers found
    }
    
    // Helper method to check if a combination is valid
    private boolean isValid(int i, int j, String num) {
        // Check for leading zeros in x1 and x2
        if (num.charAt(0) == '0' && i > 1) {
            return false;
        }
        if (num.charAt(i) == '0' && j > 1) {
            return false;
        }
        
        String sum;
        Long x1 = Long.parseLong(num.substring(0, i)); // Convert x1 to a Long
        Long x2 = Long.parseLong(num.substring(i, i + j)); // Convert x2 to a Long
        
        // Check the additive property for the remaining substring
        for (int start = i + j; start != num.length(); start += sum.length()) {
            x2 = x2 + x1; // Calculate the sum of x1 and x2
            x1 = x2 - x1; // Update x1 with the previous value of x2
            sum = x2.toString(); // Convert the sum to a string
            if (!num.startsWith(sum, start)) {
                return false; // If the sum is not a prefix, return false
            }
        }
        
        return true; // All adjacent number sums form valid prefixes
    }
    public static void main(String[] args) {
        //Initialise String num and call the function
        String num = "112358";
        Solution s = new Solution();
        System.out.println(s.isAdditiveNumber(num));
    }
}
