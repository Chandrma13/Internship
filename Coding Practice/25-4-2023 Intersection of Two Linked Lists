//class to define LL
 class ListNode {
      int val;
      ListNode next;
      ListNode(int x) {
          val = x;
          next = null;
      }
  }
 
public class Sol{ //Solution class
 public ListNode getIntersectionNode(ListNode headA, ListNode headB) { //function to get intersection node with parameters head of LL A and head of LL B
ListNode a = headA;// Initialising a Listnode a that will traverse through LL A
ListNode b = headB;//// Initialising a Listnode b that will traverse through LL B

while (a != b) { //while a is not equal to b
    if (a == null) { //if a is null it means a has traversed through LL a 
        a = headB; //so, update the value of a as head of b
    } else { //if a is not null
        a = a.next; //update the value of a as a.next 
    }
    
    if (b == null) {//if b is null it means a has traversed through LL B
        b = headA;//so, update the value of b as head of a
    } else {       //if b is not null
        b = b.next; //update the value of b as b.next 
    }
}
return a; //return the updated value of a 
}
public static void main(String[] args) {
    //Initialize LL A: 4 -> 1 -> 8 -> 4 -> 5
    ListNode headA = new ListNode(4);
    headA.next = new ListNode(1);
    headA.next.next = new ListNode(8);
    headA.next.next.next = new ListNode(4);
    headA.next.next.next.next = new ListNode(5);

    //Initialize LL B : 5 -> 6 -> 1 -> 8 -> 4 -> 5
    ListNode headB = new ListNode(5);
    headB.next = new ListNode(6);
    headB.next.next = new ListNode(1);
    headB.next.next.next = headA.next.next; // Point to the 8 node in the first list

    //call the function & print 
    Sol s = new Sol();
   
    if (s.getIntersectionNode(headA, headB) == null) {
        System.out.println("No Intersection");
    } else {
        System.out.println("Intersected at " + s.getIntersectionNode(headA, headB).val);
    }
}
}
