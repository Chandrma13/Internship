import java.util.Arrays;
class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;       // Pointer to the previous node, initially null
        ListNode current = head;    // Pointer to the current node, initially set to the head
        
        while (current != null) {   // Iterate until the current node becomes null (end of the original list)
            ListNode next = current.next;   // Store the next node in the original list
            
            current.next = prev;    // Reverse the link: make the current node point to the previous node
            
            prev = current;         // Move the prev pointer to the current node
            current = next;         // Move the current pointer to the next node
        }
        
        return prev;    // Return the new head of the reversed list
    }
     
    // Helper method to print the elements of a linked list
    public static void printList(ListNode head) {
            ListNode current = head;
            while (current != null) {
                System.out.print(current.val + " -> ");
                current = current.next;
            }
            System.out.println("null");
        }
    public class Main {
        public static void main(String[] args) {
            //Initialise a Linked List
            ListNode head = new ListNode(1);
            head.next = new ListNode(2);
            head.next.next = new ListNode(3);
            head.next.next.next = new ListNode(4);
            head.next.next.next.next = new ListNode(5);
           //Call the helper print function and print
            Solution solution = new Solution();
            ListNode reversedList = solution.reverseList(head);
            printList(reversedList);
        }
       
    }
}
