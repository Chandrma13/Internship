 //Initialize a tree
 class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
    this.val = val;
    this.left = left;
    this.right = right;
     }
 }
 class Solution {
    // create a new tree and a reference to its root node
    TreeNode tree = new TreeNode();
    TreeNode head = tree;
    
    // recursively traverse the input binary search tree in inorder fashion
    public TreeNode increasingBST(TreeNode root) {
        // base case: if root is null, return null
        if(root==null) return null;
        
        // traverse the left subtree
        increasingBST(root.left);
        
        // create a new node in the new tree with the value of the current node
        // set the right child of the current node to point to the new node
        // update the reference to the current node to point to the new node
        tree=tree.right=new TreeNode(root.val);
        
        // traverse the right subtree
        increasingBST(root.right);
        
        // return the right child of the root node of the new tree
        return head.right;
    }
    public static void main(String[] args) {
        // create a binary search tree
        TreeNode root = new TreeNode(5);
        root.left = new TreeNode(3);
        root.right = new TreeNode(6);
        root.left.left = new TreeNode(2);
        root.left.right = new TreeNode(4);
        root.right.right = new TreeNode(8);
        root.left.left.left = new TreeNode(1);
        root.right.right.left = new TreeNode(7);
        root.right.right.right = new TreeNode(9);
    
        // convert the binary search tree into a binary tree with increasing order
        Solution solution = new Solution();
        TreeNode result = solution.increasingBST(root);
    
        // print the values of the nodes in the binary tree with increasing order
        while (result != null) {
            System.out.print(result.val + " ");
            result = result.right;
        }
    }
    
}

