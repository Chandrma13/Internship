class Node {
    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
} 

class Solution {
    int res = Integer.MIN_VALUE;  // Initialize the result variable with the minimum possible value of an integer

    int maxPathSum(Node root) {
        // Main method to find the maximum path sum in the binary tree
        int h = maxPathSumUtil(root);  // Call the helper method to calculate the maximum path sum recursively
        if (root.left == null || root.right == null) {
            // If the root node has either a left child or a right child (not both), update the result if necessary
            res = Math.max(res, h);
        }
        return res;  // Return the final result
    }

    int maxPathSumUtil(Node root) {
        // Recursive helper method to calculate the maximum path sum
        if (root == null)
            return 0;  // If the current node is null, return 0

        if (root.left == null && root.right == null)
            return root.data;  // If the current node is a leaf node (no children), return the data value of the node

        int ls = maxPathSumUtil(root.left);    // Recursively calculate the maximum path sum of the left subtree
        int rs = maxPathSumUtil(root.right);   // Recursively calculate the maximum path sum of the right subtree

        if (root.left != null && root.right != null) {
            // If the node has both left and right children, calculate the sum of left subtree, right subtree, and the current node's data value
            res = Math.max(res, (ls + rs + root.data));  // Update the result if the sum is greater than the current result
            return Math.max(ls, rs) + root.data;         // Return the maximum sum between the left subtree and the right subtree plus the current node's data value
        }

        if (root.left == null)
            return rs + root.data;  // If the node has no left child, return the sum of the right subtree plus the current node's data value
        else
            return ls + root.data;  // If the node has no right child, return the sum of the left subtree plus the current node's data value
    }
    public static void main(String[] args) {
        // Create the binary tree
        Node root = new Node(3);
        root.left = new Node(4);
        root.right = new Node(5);
        root.left.left = new Node(-10);
        root.left.right = new Node(4);

        // Create an instance of the Solution class
        Solution solution = new Solution();

        // Calculate the maximum path sum
        int maxPathSum = solution.maxPathSum(root);

        // Print the result
        System.out.println(maxPathSum);
    }
}
