class Node
{
    int data;           // Integer data stored in the node.
    Node next;          // Reference to the next node in the list.
    Node(int d) {       // Constructor to initialize the node with data 'd'.
        data = d;
        next = null;     // Initially, the 'next' reference is set to null.
    }
}

class Solution {
    Node sortedInsert(Node head1, int key) { // Method to insert 'key' into a sorted linked list.
        // Add your code here.
        Node newNode = new Node(key);   // Create a new node with the provided 'key'.
        int count = 0;                  // Initialize a count variable to track position.
        Node temp = head1;              // Initialize a temporary pointer to the head of the list.
        Node prev = head1;              // Initialize a previous pointer to the head of the list.

        while (temp != null) {           // Start iterating through the list.
            count++;                    // Increment the count to track the position.
            if (temp.data > key) {       // Check if the current node's data is greater than 'key'.
                break;                  // If it is, exit the loop; 'key' should be inserted here.
            }
            prev = temp;                // Update the 'prev' pointer to the current node.
            temp = temp.next;           // Move the 'temp' pointer to the next node.
        }

        if (count == 1) {               // If count is 1, 'key' should be inserted at the beginning.
            newNode.next = temp;        // Set the new node's 'next' to the current head.
            head1 = newNode;            // Update the head to the new node.
        } else {                        // Otherwise, 'key' should be inserted somewhere in the middle or end.
            newNode.next = temp;        // Set the new node's 'next' to the current node.
            prev.next = newNode;        // Update the 'next' of the previous node to the new node.
        }

        return head1;                   // Return the updated head of the list.
    }
 public static void main(String[] args) {
        // Create a sorted linked list with some initial values
        Node head = new Node(25);
        head.next = new Node(36);
        head.next.next = new Node(47);
        head.next.next.next = new Node(58);
        head.next.next.next.next = new Node(69);
        head.next.next.next.next.next = new Node(80);

        // Print the original sorted linked list
        System.out.println("Original Sorted Linked List:");
        printLinkedList(head);

        // Insert a new value (19) into the sorted linked list
        int keyToInsert = 19;
        Solution solution = new Solution();
        head = solution.sortedInsert(head, keyToInsert);

        // Print the updated sorted linked list after insertion
        System.out.println("\nSorted Linked List After Insertion:");
        printLinkedList(head);
    }

    // Helper function to print the linked list
    public static void printLinkedList(Node head) {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }
}
