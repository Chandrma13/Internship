class Solution {
    public int searchInsert(int[] nums, int target) {
        int left = 0; //initialize the left index of array nums
        int right = nums.length - 1; //initialize the right index of array nums
        while (left <= right) { //using binary search to find if the array have target element because the array is already sorted
            int mid = left + (right - left) / 2; //initialize an integer mid which will store the mid index to store the mid index of the array
            if (nums[mid] == target) {
                return mid; //if element at mid index of array nums is equal to target return mid
            } else if (nums[mid] > target) {//if element at mid index of array nums is greater than target 
                right = mid - 1;           //update the value of right index to mid-1 because the target element is in the first half of the array
            } else {
                left = mid + 1;// else update the value of left index to mid+1 because if the above condition is false then the  element is present in the second half of the array
            }
        }
        return left; //return the updated value of left, this will return the index of target in array if present or it will return the index that the target should be placed in the sorted array
    }
    public static void main(String[] args) {
        //initialize the parameter variables and call the function
        int[] nums = {1,3,5,6};
        int target = 5;
        Solution s = new Solution();
        System.out.println(s.searchInsert(nums, target));
    }
}
