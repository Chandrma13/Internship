import java.util.*;
class TreeNode {//Definition of a Binary Tree
     int val;
     TreeNode left;
     TreeNode right;
     TreeNode() {}
     TreeNode(int val) { this.val = val; }
     TreeNode(int val, TreeNode left, TreeNode right) {
     this.val = val;
     this.left = left;
     this.right = right;
       }
    }
class Solution {
    public TreeNode addOneRow(TreeNode root, int val, int depth) {
        // If the depth is 1, insert a new root node with the given value
        if (depth == 1) {
            TreeNode temp = new TreeNode(val);
            temp.left = root;
            return temp;
        }

        // Decrement the depth by 2 to reach the level just before the target depth
        depth -= 2;

        // Create a queue for level-order traversal and add the root node
        Queue<TreeNode> q = new ArrayDeque<>();
        q.add(root);

        // Traverse to the level just before the target depth
        while (depth-- > 0) {
            int n = q.size();
            while (n-- > 0) {
                // Dequeue a node from the queue
                TreeNode temp = q.peek();
                q.remove();

                // Add the left child to the queue if it exists
                if (temp.left != null) {
                    q.add(temp.left);
                }
                // Add the right child to the queue if it exists
                if (temp.right != null) {
                    q.add(temp.right);
                }
            }
        }

        // Add a new row of nodes with the given value at the target depth
        while (q.size() != 0) {
            // Dequeue a node from the queue
            TreeNode temp = q.peek();
            q.remove();

            // Store the original left and right children
            TreeNode l = temp.left;
            TreeNode r = temp.right;

            // Create new left and right children with the given value
            temp.left = new TreeNode(val);
            temp.right = new TreeNode(val);

            // Assign the original left child to the new left child
            temp.left.left = l;
            // Assign the original right child to the new right child
            temp.right.right = r;
        }

        // Return the modified tree with the new row added at the target depth
        return root;
    }
    // Helper function to print the tree (level-order traversal)
    public static void printTree(TreeNode root) {
        if (root == null) {//If root is null return
            return;
        }
         //Initialise a new queue
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);//add root in queue
    
        while (!queue.isEmpty()) {//while queue is not empty
            TreeNode node = queue.poll();//retrieve the head of the queue
            System.out.print(node.val + " ");//print the value of node
    
            if (node.left != null) {//if node.left is not null
                queue.add(node.left);//add that value in queue
            }
    
            if (node.right != null) {//If node.right is not null
                queue.add(node.right);//add that value in queue
            }
        }
    }
    
    public static void main(String[] args) {
        // Initialize the binary tree
        TreeNode root = new TreeNode(4);
        root.left = new TreeNode(2);
        root.right = new TreeNode(6);
        root.left.left = new TreeNode(3);
        root.left.right = new TreeNode(1);
        root.right.left = new TreeNode(5);
        
        // Initialize the value to be added and the level at which it will be added
        int val = 1;
        int depth = 2;
        
        // Create an instance of the Solution class
        Solution s = new Solution();
        
        // Call the addOneRow method and store the modified tree
        root = s.addOneRow(root, val, depth);
        
        // Print the modified tree
        printTree(root);
    }
    
   
}
